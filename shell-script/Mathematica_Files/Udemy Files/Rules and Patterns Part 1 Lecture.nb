(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     91774,       2218]
NotebookOptionsPosition[     83058,       1952]
NotebookOutlinePosition[     85132,       2003]
CellTagsIndexPosition[     84600,       1991]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Rules", "Section",
 CellChangeTimes->{{3.668099983730905*^9, 3.6680999841338043`*^9}}],

Cell[TextData[{
 "A rule is an ordered pair that creates a mapping from one ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression, to another. We\[CloseCurlyQuote]ve seen it before:"
}], "Text",
 CellChangeTimes->{{3.668204395389752*^9, 3.668204418715289*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6682044199080963`*^9, 3.668204434740602*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {-0.9999999873241017, 0.9999999723764091}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6682046612251596`*^9}]
}, Open  ]],

Cell[TextData[{
 "Here, ",
 StyleBox["ImageSize -> Tiny", "Code"],
 " is a rule. Typically, options in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " are represented as rules:"
}], "Text",
 CellChangeTimes->{{3.6682044380511293`*^9, 3.6682044865130253`*^9}, {
  3.668204744696031*^9, 3.6682047714713182`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Rule"}]], "Input",
 CellChangeTimes->{{3.668204746788158*^9, 3.668204747454235*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"lhs\\\", \\\"TI\\\"], \
\\\"->\\\", StyleBox[\\\"rhs\\\", \\\"TI\\\"]}]\\) or \
\\!\\(\\*RowBox[{StyleBox[\\\"lhs\\\", \\\"TI\\\"], \\\"\[Rule]\\\", \
StyleBox[\\\"rhs\\\", \\\"TI\\\"]}]\\) represents a rule that transforms \
\\!\\(\\*StyleBox[\\\"lhs\\\", \\\"TI\\\"]\\) to \
\\!\\(\\*StyleBox[\\\"rhs\\\", \\\"TI\\\"]\\). \"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Rule"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.6682047477097073`*^9},
 CellTags->"Info-e3f71035-09fb-4cff-a39d-c77cabfed705"]
}, Open  ]],

Cell["Suppose you have an expression:", "Text",
 CellChangeTimes->{
  3.668099991545725*^9, {3.668204501304701*^9, 3.6682046020944233`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2", ",", "3"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.6682046443568974`*^9, 3.668204646492165*^9}, {
  3.66820470628424*^9, 3.6682047074094276`*^9}, {3.668204845125503*^9, 
  3.6682048460150623`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2", ",", "3"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668204659680214*^9, 3.668204713268485*^9, 
  3.668204856677391*^9}]
}, Open  ]],

Cell[TextData[{
 "And you want to change every instance of 1 to x. The easiest way to do this \
is with a rule transformation and the ",
 StyleBox["ReplaceAll", "Code"],
 " function:"
}], "Text",
 CellChangeTimes->{{3.668204604190666*^9, 3.668204605453603*^9}, {
  3.668204670930847*^9, 3.66820467469873*^9}, {3.668204708650125*^9, 
  3.668204710121723*^9}, {3.668204848325047*^9, 3.668204849237026*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ReplaceAll"}]], "Input",
 CellChangeTimes->{{3.6682046754368877`*^9, 3.668204678449168*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\"/.\\\
\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) applies a rule or list of rules \
in an attempt to transform each subpart of an expression \\!\\(\\*StyleBox[\\\
\"expr\\\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"ReplaceAll\\\", \
\\\"[\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\"]\\\"}]\\) represents an \
operator form of ReplaceAll that can be applied to an expression.\"\>", "MSG"],
   "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ReplaceAll"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.668204678692623*^9},
 CellTags->"Info-40dbc8a4-ea25-4031-a8e6-86d81ebe3490"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{"list", ",", 
   RowBox[{"1", "\[Rule]", "x"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668100004798386*^9, 3.668100016129175*^9}, {
  3.668100073656884*^9, 3.668100104735383*^9}, {3.6681042877768*^9, 
  3.668104289472144*^9}, {3.668204717505471*^9, 3.6682047193456507`*^9}, {
  3.668204852517243*^9, 3.668204853900619*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "2", ",", "3", ",", "x", ",", "2", ",", "3"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6681000170613813`*^9, {3.668100079988634*^9, 3.668100105040146*^9}, 
   3.668104290708166*^9, 3.668204686222866*^9, 3.6682047201001387`*^9, 
   3.668204858348205*^9}]
}, Open  ]],

Cell[TextData[{
 "Notice that the rule by itself is not enough to transform the expression. \
We need the ",
 StyleBox["ReplaceAll", "Code"],
 " function to actually apply the transformation defined by the rule. Let\
\[CloseCurlyQuote]s use the shorthand for ",
 StyleBox["ReplaceAll", "Code"],
 ":"
}], "Text",
 CellChangeTimes->{{3.66810032990703*^9, 3.66810047128061*^9}, {
  3.66820496804237*^9, 3.6682049967532377`*^9}, {3.66820510084373*^9, 
  3.6682051377233133`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", " ", 
  RowBox[{"1", "\[Rule]", "x"}]}]], "Input",
 CellChangeTimes->{{3.668205025880189*^9, 3.668205069125448*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "2", ",", "3", ",", "x", ",", "2", ",", "3"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.668205037793887*^9, 3.6682050697758636`*^9}}]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s say we further wanted to transform 2 to y, we would \
simply put the rules in a list:\
\>", "Text",
 CellChangeTimes->{{3.6681001685829363`*^9, 3.6681002317934504`*^9}, {
  3.668104310015346*^9, 3.668104339995284*^9}, {3.668204800672134*^9, 
  3.6682048041582108`*^9}, {3.668204861068379*^9, 3.6682048999153137`*^9}, {
  3.668205176385571*^9, 3.6682051859290943`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "x"}], ",", 
    RowBox[{"2", "\[Rule]", "y"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.668205189402856*^9, 3.668205194792935*^9}, {
  3.6682092856121607`*^9, 3.668209291058708*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "35", ",", "81", ",", "x", ",", "y", ",", "3", ",", "15", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668205195300335*^9, 3.668209287070407*^9}]
}, Open  ]],

Cell[TextData[{
 "A rule can transform ",
 StyleBox["any",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " expression to any other expression. For example:"
}], "Text",
 CellChangeTimes->{{3.668205200777588*^9, 3.668205228879331*^9}, {
  3.682538875320279*^9, 3.6825388765038767`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "x"}], ",", 
    RowBox[{"2", "\[Rule]", "y"}], ",", 
    RowBox[{"3", "\[Rule]", 
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.668205230180571*^9, 3.6682052491430683`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "y", ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny,
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None},
    PlotRange->{{-5, 5}, {-0.9999999873241017, 0.9999999723764091}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "x", ",", "y", ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny,
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None},
    PlotRange->{{-5, 5}, {-0.9999999873241017, 0.9999999723764091}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.6682052494349127`*^9}]
}, Open  ]],

Cell[TextData[{
 "This construct enables us to transform any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression, which is a very powerful thing, as you will discover the more \
you work with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". For example, the argument of an expression:"
}], "Text",
 CellChangeTimes->{{3.6681007124771852`*^9, 3.668100789505142*^9}, {
  3.6681043546121264`*^9, 3.668104356938829*^9}, {3.668205368346561*^9, 
  3.6682054165847178`*^9}, {3.68253888868638*^9, 3.682538889702463*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", "x", "]"}], "/.", 
  RowBox[{"x", "\[Rule]", "3"}]}]], "Input",
 CellChangeTimes->{{3.668100891898114*^9, 3.6681008984847317`*^9}}],

Cell[BoxData[
 RowBox[{"Sin", "[", "3", "]"}]], "Output",
 CellChangeTimes->{3.668100898936696*^9, 3.66810436006096*^9}]
}, Open  ]],

Cell["Replace the Head of an expression:", "Text",
 CellChangeTimes->{{3.668104384590641*^9, 3.668104390912616*^9}, 
   3.668205420656851*^9, {3.6825389069575644`*^9, 3.6825389080882797`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", "x", "]"}], "/.", 
  RowBox[{"Sin", "\[Rule]", "Cos"}]}]], "Input",
 CellChangeTimes->{{3.668100891898114*^9, 3.668100906360436*^9}}],

Cell[BoxData[
 RowBox[{"Cos", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.668100906736144*^9}]
}, Open  ]],

Cell[TextData[{
 "You can even match entire expressions, like the ",
 StyleBox["Sin[x]", "Code"],
 ":"
}], "Text",
 CellChangeTimes->{{3.668205538493134*^9, 3.668205562675572*^9}, 
   3.6825389189018183`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], "+", "y"}], "/.", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], "\[Rule]", 
   RowBox[{"y", "^", "2"}]}]}]], "Input",
 CellChangeTimes->{{3.66820549539463*^9, 3.668205520933668*^9}}],

Cell[BoxData[
 RowBox[{"y", "+", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{{3.6682055079243317`*^9, 3.6682055213381443`*^9}}]
}, Open  ]],

Cell["\<\
Note: If there are two rules with the same key values, the first one takes \
precedence.\
\>", "Text",
 CellChangeTimes->{{3.668104411095893*^9, 3.668104439580262*^9}, {
   3.668205429656497*^9, 3.66820543817627*^9}, 3.668205607146247*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"3", "\[Rule]", "\"\<cat\>\""}], ",", 
    RowBox[{"3", "\[Rule]", "\"\<Dog\>\""}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.668100811459866*^9, 3.668100855442171*^9}, {
  3.668104407001713*^9, 3.668104407158525*^9}, {3.668104443992264*^9, 
  3.668104447939793*^9}, {3.6682056232994757`*^9, 3.668205628826254*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "\<\"cat\"\>", ",", "1", ",", "2", ",", "\<\"cat\"\>"}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.668104359167705*^9, 3.6681044076120167`*^9, {3.6681044445069523`*^9, 
   3.668104448689723*^9}, 3.668205629961998*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["ReplaceRepeated", "Subsection",
 CellChangeTimes->{{3.668104605260676*^9, 3.6681046089389877`*^9}}],

Cell[TextData[{
 "In the following expression we replace ",
 StyleBox["{4} -> 4", "Code"],
 ". "
}], "Text",
 CellChangeTimes->{{3.668104616410989*^9, 3.668104640000498*^9}, {
  3.668205788923852*^9, 3.6682057894758663`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"{", "4", "}"}], "}"}], "}"}], ",", "5"}], "}"}], "/.", 
  RowBox[{
   RowBox[{"{", "4", "}"}], "\[Rule]", "4"}]}]], "Input",
 CellChangeTimes->{{3.668104461947633*^9, 3.6681045159799767`*^9}, {
  3.668104643286193*^9, 3.6681046510484467`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"{", "4", "}"}], "}"}], ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{{3.668104508348155*^9, 3.66810451655651*^9}, {
   3.6681046456895657`*^9, 3.668104652015869*^9}, 3.6681047029068003`*^9}]
}, Open  ]],

Cell[TextData[{
 "Notice that it reduced the depth by 1. If we wanted to keep applying this \
rule until 4 is no longer nested, we can use ",
 StyleBox["ReplaceRepeated", "Code"]
}], "Text",
 CellChangeTimes->{{3.668104718249894*^9, 3.668104742376042*^9}, {
  3.6682057969477243`*^9, 3.668205820634964*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ReplaceRepeated"}]], "Input",
 CellChangeTimes->{{3.668104744323114*^9, 3.668104747564344*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \
\\\"//.\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) repeatedly performs \
replacements until \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) no longer \
changes. \"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ReplaceRepeated"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.668104749076985*^9},
 CellTags->"Info-1fafab22-ab65-4a8c-a0e1-e0e4f4a02613"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceRepeated", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"{", "4", "}"}], "}"}], "}"}], ",", "5"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", "4", "}"}], "\[Rule]", "4"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6681050472141323`*^9, 3.668105053992449*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.668105054268202*^9}]
}, Open  ]],

Cell[TextData[{
 "The shorthand for replace repeated is ",
 StyleBox["//.", "Code"]
}], "Text",
 CellChangeTimes->{{3.668205836802938*^9, 3.668205843705863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"{", "4", "}"}], "}"}], "}"}], ",", "5"}], "}"}], "//.", 
  RowBox[{
   RowBox[{"{", "4", "}"}], "\[Rule]", "4"}]}]], "Input",
 CellChangeTimes->{{3.668104461947633*^9, 3.6681045159799767`*^9}, {
  3.668104643286193*^9, 3.6681046510484467`*^9}, {3.668104707289366*^9, 
  3.66810470963866*^9}, {3.668205857794561*^9, 3.6682058698203907`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{
  3.668104710223145*^9, {3.668205858893771*^9, 3.668205873497151*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"{", "4", "}"}], "}"}], "}"}], ",", "5"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6682018887681723`*^9, 3.668201899051476*^9}, {
  3.668205879696951*^9, 3.668205888496722*^9}, {3.668206095593693*^9, 
  3.668206097978026*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", "4", "}"}], "}"}], "}"}], ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.668201927640504*^9, 3.6682058893050137`*^9, 
  3.668206099156836*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "=", 
  RowBox[{"nestedList", "/.", 
   RowBox[{
    RowBox[{"{", "4", "}"}], "\[Rule]", "4"}]}]}]], "Input",
 CellChangeTimes->{{3.668201915082568*^9, 3.668201922594393*^9}, {
  3.668205891480509*^9, 3.668205902834749*^9}, {3.6682061016634808`*^9, 
  3.668206103067971*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{{3.668201924565091*^9, 3.668201931990849*^9}, {
  3.6682058938322906`*^9, 3.668205904419388*^9}, {3.668206103843604*^9, 
  3.668206106949409*^9}}]
}, Open  ]],

Cell["\<\
You need to be careful with this. Using this function, you can easily send \
your program into infinite loops. For example:\
\>", "Text",
 CellChangeTimes->{{3.6681047654517307`*^9, 3.66810481274512*^9}, 
   3.668206046451187*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x", "]"}], "/.", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"f", "[", "x", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.668104817375675*^9, 3.668104824085085*^9}, {
  3.6682061167449903`*^9, 3.668206142048778*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"f", "[", "x", "]"}], "]"}]], "Output",
 CellChangeTimes->{
  3.668104824648439*^9, {3.668206083932241*^9, 3.6682061424479437`*^9}}]
}, Open  ]],

Cell[TextData[{
 "Will give you a nested expression. If we used ",
 StyleBox["ReplaceRepeated", "Code"],
 ", the replacement rule will take place an infinite number of times. "
}], "Text",
 CellChangeTimes->{{3.6681048280562696`*^9, 3.668104895860248*^9}, {
   3.6681050292789373`*^9, 3.668105030073317*^9}, {3.6682061925824423`*^9, 
   3.668206197086117*^9}, 3.66820644450144*^9}],

Cell["\<\
As you can imagine, rules are a very powerful language feature. If rules are \
bread, patterns are butter. \
\>", "Text",
 CellChangeTimes->{{3.668105194044443*^9, 3.668105252408024*^9}, 
   3.668106655607018*^9, {3.6681068063123837`*^9, 3.6681068207997093`*^9}, {
   3.6682062209810038`*^9, 3.668206311474061*^9}, {3.668206503339279*^9, 
   3.668206559489362*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patterns", "Section",
 CellChangeTimes->{{3.6680999856976852`*^9, 3.668099987733938*^9}}],

Cell[TextData[{
 "Patterns enable ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to represent classes of expressions. "
}], "Text",
 CellChangeTimes->{{3.668106932150929*^9, 3.6681069707799883`*^9}, {
   3.668107112216918*^9, 3.668107122792466*^9}, 3.668202277279002*^9, 
   3.668203757220393*^9, {3.6682065628250847`*^9, 3.668206596112473*^9}}],

Cell["\<\
For example, suppose we wanted to replace all the integers in a list. We need \
something that represents the class of Integers. We can test if something \
belongs to a class using MatchQ:\
\>", "Text",
 CellChangeTimes->{
  3.66820375949258*^9, {3.668206623575636*^9, 3.6682066961566353`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MatchQ"}]], "Input",
 CellChangeTimes->{{3.668206696926412*^9, 3.668206698474893*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"MatchQ\\\", \\\"[\\\", RowBox[{StyleBox[\
\\\"expr\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"form\\\", \\\"TI\\\"]}], \
\\\"]\\\"}]\\) returns True if the pattern \\!\\(\\*StyleBox[\\\"form\\\", \\\
\"TI\\\"]\\) matches \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\), and \
returns False otherwise.\\n\\!\\(\\*RowBox[{\\\"MatchQ\\\", \\\"[\\\", \
StyleBox[\\\"form\\\", \\\"TI\\\"], \\\"]\\\"}]\\) represents an operator \
form of MatchQ that can be applied to an expression.\"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/MatchQ"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.668206698776498*^9},
 CellTags->"Info-9d067502-4bd1-4728-955f-e14e7f41c682"]
}, Open  ]],

Cell["\<\
The class of something is the head of the expression. For the class of \
integers, we would write:\
\>", "Text",
 CellChangeTimes->{{3.668206717228496*^9, 3.668206721587534*^9}, {
  3.668207047325408*^9, 3.66820706387939*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"1", ",", "_Integer"}], "]"}]], "Input",
 CellChangeTimes->{{3.668206700247786*^9, 3.6682067103239727`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.668206727132759*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{".1", ",", "_Integer"}], "]"}]], "Input",
 CellChangeTimes->{{3.668206732828588*^9, 3.668206738323101*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.6682067385518827`*^9}]
}, Open  ]],

Cell[TextData[{
 "The underscore (_) is known as ",
 StyleBox["Blank", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.6681090608962383`*^9, 3.668109148110588*^9}, {
   3.668202337803986*^9, 3.668202343819837*^9}, 3.668207039339409*^9, 
   3.6682070774632273`*^9, {3.668207109366078*^9, 3.668207134336053*^9}, {
   3.668208919144527*^9, 3.66820892410428*^9}, {3.668209255392022*^9, 
   3.668209255988908*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Blank"}]], "Input",
 CellChangeTimes->{{3.6682092568069344`*^9, 3.668209257651465*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"_ or \\!\\(\\*RowBox[{\\\"Blank\\\", \\\"[\\\", \
\\\"]\\\"}]\\) is a pattern object that can stand for any \
\\!\\(\\*StyleBox[\\\"Wolfram Language\\\", \\\"RebrandingTerm\\\"]\\) \
expression. \\n\\!\\(\\*StyleBox[RowBox[{\\\"_\\\", StyleBox[\\\"h\\\", \
\\\"TI\\\"]}]]\\) or \\!\\(\\*RowBox[{\\\"Blank\\\", \\\"[\\\", \
StyleBox[\\\"h\\\", \\\"TI\\\"], \\\"]\\\"}]\\) can stand for any expression \
with head \\!\\(\\*StyleBox[\\\"h\\\", \\\"TI\\\"]\\). \"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Blank"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.668209258059058*^9},
 CellTags->"Info-754393f8-e9b6-4f35-b9bb-bfe060629e0e"]
}, Open  ]],

Cell[TextData[{
 "The word appearing after the ",
 StyleBox["Blank", "Code"],
 " is the ",
 StyleBox["Head", "Code"],
 " of the expression that we are interested in. Let\[CloseCurlyQuote]s create \
a list:"
}], "Text",
 CellChangeTimes->{3.6682092611024733`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"{", 
   RowBox[{"1.1", ",", "2", ",", "x", ",", "3.14", ",", 
    RowBox[{"{", 
     RowBox[{"\[Pi]", ",", "2"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.668207331507153*^9, 3.6682074334956293`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.1`", ",", "2", ",", "x", ",", "3.14`", ",", 
   RowBox[{"{", 
    RowBox[{"\[Pi]", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668207375769874*^9, 3.66820745231081*^9}, 
   3.668215942549006*^9}]
}, Open  ]],

Cell["To replace all integers in the list:", "Text",
 CellChangeTimes->{{3.668208928128997*^9, 3.668208938998818*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{"_Integer", "\[Rule]", "\"\<This was an integer\>\""}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.668107194963047*^9, 3.6681072085386057`*^9}, 
   3.668107599263329*^9, {3.668207143726125*^9, 3.668207160076538*^9}, 
   3.668207379416299*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.1`", ",", "\<\"This was an integer\"\>", ",", "x", ",", "3.14`", ",", 
   RowBox[{"{", 
    RowBox[{"\[Pi]", ",", "\<\"This was an integer\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.668107209324301*^9, 3.668107601140032*^9, 3.668207161337227*^9, {
   3.668207380199201*^9, 3.668207400011903*^9}, 3.668207463485627*^9}]
}, Open  ]],

Cell[TextData[{
 "If we look at the ",
 StyleBox["Head", "Code"],
 " of 2, it is an ",
 StyleBox["Integer", "Code"],
 ":"
}], "Text",
 CellChangeTimes->{{3.668216117258247*^9, 3.668216152513813*^9}, 
   3.6825394883283997`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.6681091497508287`*^9, 3.668109151047884*^9}, {
  3.668214881900086*^9, 3.668214882523839*^9}}],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{3.668109151572762*^9, 3.668207410760044*^9, 
  3.668207474012217*^9, 3.668214883698406*^9}]
}, Open  ]],

Cell[TextData[{
 "Whereas the ",
 StyleBox["Head", "Code"],
 " of 1.1 is not ",
 StyleBox["Integer", "Code"],
 ":"
}], "Text",
 CellChangeTimes->{{3.6681091529538527`*^9, 3.6681091726537323`*^9}, {
   3.6682072250746117`*^9, 3.668207243449314*^9}, {3.6682073885965*^9, 
   3.668207389732409*^9}, 3.682539501680773*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "1.1", "]"}]], "Input",
 CellChangeTimes->{{3.668109174085911*^9, 3.668109177261495*^9}, 
   3.668207226434001*^9, {3.668207387773508*^9, 3.668207407299994*^9}}],

Cell[BoxData["Real"], "Output",
 CellChangeTimes->{3.668109177628127*^9, 3.668207408091022*^9, 
  3.668207475222028*^9}]
}, Open  ]],

Cell["\<\
Notice that the rule replacement worked at multiple depths. ReplaceAll \
recurses into an expression until it matches, and then performs the \
replacement. If we left out the Head in the pattern, then the pattern would \
only match the top most expression. \
\>", "Text",
 CellChangeTimes->{{3.66820297950397*^9, 3.6682029927492313`*^9}, {
  3.668212510874962*^9, 3.668212527076173*^9}, {3.668214877686204*^9, 
  3.668214878331921*^9}, {3.668216021157989*^9, 3.668216084150276*^9}, {
  3.66821617409373*^9, 3.668216192819584*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{"x_", "\[Rule]", 
    RowBox[{"F", "[", "x", "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6681075203671503`*^9, 3.668107526550428*^9}, {
   3.668203267620002*^9, 3.668203269155394*^9}, {3.668207308448629*^9, 
   3.6682073085672293`*^9}, 3.668207548811246*^9, {3.668215931712659*^9, 
   3.6682159329764347`*^9}}],

Cell[BoxData[
 RowBox[{"F", "[", 
  RowBox[{"{", 
   RowBox[{"1.1`", ",", "2", ",", "x", ",", "3.14`", ",", 
    RowBox[{"{", 
     RowBox[{"\[Pi]", ",", "2"}], "}"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{{3.668107521441413*^9, 3.668107528250835*^9}, 
   3.668203269484565*^9, 3.668207549422886*^9, {3.668215933977592*^9, 
   3.6682159457257442`*^9}}]
}, Open  ]],

Cell["\<\
So the rule replacement was not applied to it. We can even name the patterns \
to work with the matched expression: \
\>", "Text",
 CellChangeTimes->{{3.6681072126882763`*^9, 3.668107214350052*^9}, {
  3.668207245858646*^9, 3.668207294519503*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{"x_Integer", "\[Rule]", 
    RowBox[{"Sin", "[", "x", "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.668107400991191*^9, 3.668107436489171*^9}, {
  3.668107533503306*^9, 3.668107533870576*^9}, {3.668109449407537*^9, 
  3.6681094543988934`*^9}, {3.668203251373581*^9, 3.6682032515319653`*^9}, {
  3.6682074158919067`*^9, 3.6682074160354633`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.1`", ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", "x", ",", "3.14`", ",", 
   RowBox[{"{", 
    RowBox[{"\[Pi]", ",", 
     RowBox[{"Sin", "[", "2", "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668107425801036*^9, 3.668107436732377*^9}, 
   3.6681075344624557`*^9, 3.668109454650675*^9, 3.6682032520581083`*^9, 
   3.668207416940195*^9, 3.6682074762803392`*^9}]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["x_Integer", "Code"],
 " is called a named pattern. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s ",
 StyleBox["FullForm", "Code"],
 " of the expression looks like this:"
}], "Text",
 CellChangeTimes->{{3.668209090858039*^9, 3.66820910691256*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "x_Integer", "]"}]], "Input",
 CellChangeTimes->{{3.66820896069049*^9, 3.66820897674975*^9}, 
   3.668209114418868*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Pattern", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Blank", "[", "Integer", "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{{3.6682089636171083`*^9, 3.668208976963176*^9}, 
   3.668209114728149*^9}]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["Head", "Code"],
 " is ",
 StyleBox["Pattern", "Code"],
 ":"
}], "Text",
 CellChangeTimes->{{3.668209132583901*^9, 3.6682091380956297`*^9}, {
  3.682539548217618*^9, 3.68253954833496*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Pattern"}]], "Input",
 CellChangeTimes->{{3.668209138946927*^9, 3.6682091421048822`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\!\(\*RowBox[{StyleBox[\\\"s\\\", \\\"TI\\\"], \\\":\\\", \
StyleBox[\\\"obj\\\", \\\"TI\\\"]}]\) represents the pattern object \
\!\(\*StyleBox[\\\"obj\\\", \\\"TI\\\"]\), assigned the name \
\!\(\*StyleBox[\\\"s\\\", \\\"TI\\\"]\). \"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Pattern"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.668209142420589*^9},
 CellTags->"Info-0e61a647-18e8-4183-b0b5-cd3112e4dd82"]
}, Open  ]],

Cell[TextData[{
 "The shorthand for pattern is \[OpenCurlyQuote]",
 StyleBox[":", "Code"],
 "\[CloseCurlyQuote]. We could write this as:"
}], "Text",
 CellChangeTimes->{{3.668209190268704*^9, 3.6682091951496477`*^9}, {
   3.668209238548212*^9, 3.6682092396121397`*^9}, {3.668209439421878*^9, 
   3.6682094395650253`*^9}, 3.668209541513739*^9, {3.668209592864842*^9, 
   3.6682096466300163`*^9}, {3.682539562837894*^9, 3.682539568237651*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", ":", 
  RowBox[{"Blank", "[", "Integer", "]"}]}]], "Input",
 CellChangeTimes->{{3.6682096494595957`*^9, 3.6682096534304523`*^9}}],

Cell[BoxData["x_Integer"], "Output",
 CellChangeTimes->{3.668209653708531*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", ":", "_Integer"}], "\[Rule]", 
    RowBox[{"Sin", "[", "x", "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6682096911820707`*^9, 3.668209697380732*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "35", "]"}], ",", 
   RowBox[{"Sin", "[", "81", "]"}], ",", 
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "15", "]"}], ",", 
   RowBox[{"Sin", "[", "20", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.668209699320567*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multiple objects", "Subsection",
 CellChangeTimes->{{3.668109530262168*^9, 3.668109540044549*^9}, 
   3.668207593174024*^9}],

Cell["\<\
Let\[CloseCurlyQuote]s look at an interesting problem. Suppose you had a \
random list and you wanted to identify occurrences of 1, 2 and 3, and replace \
them with \[OpenCurlyDoubleQuote]Eureka\[CloseCurlyDoubleQuote]. \
\>", "Text",
 CellChangeTimes->{{3.668109555267959*^9, 3.668109618618482*^9}, {
  3.668207606693614*^9, 3.6682076879939957`*^9}, {3.682539592750134*^9, 
  3.6825395996441813`*^9}}],

Cell["Let\[CloseCurlyQuote]s generate our random list:", "Text",
 CellChangeTimes->{{3.682539621470029*^9, 3.6825396260850677`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RandomInteger"}]], "Input",
 CellChangeTimes->{{3.66820770277213*^9, 3.668207703027628*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"RandomInteger\\\", \\\"[\\\", RowBox[{\\\
\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"min\\\", \\\"TI\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]}], \\\"}\\\"}], \\\"]\\\"}]\\) gives a pseudorandom integer in \
the range \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}]\\). \
\\n\\!\\(\\*RowBox[{\\\"RandomInteger\\\", \\\"[\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]], \\\"]\\\"}]\\) gives a pseudorandom integer in the range \\!\\(\
\\*RowBox[{\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \
StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]}], \\\"}\\\"}]\\). \\n\\!\\(\\*RowBox[{\\\"RandomInteger\\\", \\\
\"[\\\", \\\"]\\\"}]\\) pseudorandomly gives 0 or 1. \
\\n\\!\\(\\*RowBox[{\\\"RandomInteger\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"range\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) gives a list of \\!\\(\\*StyleBox[\\\"n\\\", \\\
\"TI\\\"]\\) pseudorandom integers. \
\\n\\!\\(\\*RowBox[{\\\"RandomInteger\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"range\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) gives an \
\\!\\(\\*SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\
\"TR\\\"]]\\)\[Times]\\!\\(\\*SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]]\\)\[Times]\[Ellipsis] array of pseudorandom \
integers. \"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/RandomInteger"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.6682077033433867`*^9},
 CellTags->"Info-cf052604-06b7-4446-a32a-f5b6efeabd11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"100", ",", "2"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"100", ",", "2"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.66820769622183*^9, 3.668207775599368*^9}, {
  3.6682080070395527`*^9, 3.6682080096472473`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "35", ",", "81", ",", "1", ",", "2", ",", "3", ",", "15", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6682077253522778`*^9, 3.6682077761476192`*^9}, 
   3.6682080100829*^9}]
}, Open  ]],

Cell["\<\
If we knew ahead of time that we will have two elements before and after our \
sequence, then we can do something like:\
\>", "Text",
 CellChangeTimes->{{3.668109651587163*^9, 3.668109698399598*^9}, {
  3.6682077933264523`*^9, 3.668207803774068*^9}, {3.668208015727273*^9, 
  3.66820802342247*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "a_", ",", "b_", ",", "1", ",", "2", ",", "3", ",", "c_", ",", "d_"}], 
    "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "\"\<Eureka\>\"", ",", "c", ",", "d"}], 
    "}"}]}]}]], "Input",
 CellChangeTimes->{{3.6681096999086018`*^9, 3.668109769743902*^9}, {
  3.668208029944831*^9, 3.668208045182127*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"35", ",", "81", ",", "\<\"Eureka\"\>", ",", "15", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668109741409567*^9, 3.6681097778687687`*^9, 
  3.668208048150572*^9}]
}, Open  ]],

Cell[TextData[{
 "That worked, but good programmers are generalists. Our pattern will only \
match expressions that begin and end with two elements. To represent \
sequences of expressions, we need ",
 StyleBox["BlankSequence", "Code"],
 " (",
 StyleBox["__", "Code"],
 "):"
}], "Text",
 CellChangeTimes->{{3.66820806594979*^9, 3.668208118130887*^9}, {
  3.668208273949657*^9, 3.668208332107662*^9}, {3.6682084078818817`*^9, 
  3.668208450136097*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "BlankSequence"}]], "Input",
 CellChangeTimes->{{3.6681098894988956`*^9, 3.668109895143733*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"__ (two _ characters) or \\!\\(\\*RowBox[{\\\"BlankSequence\\\
\", \\\"[\\\", \\\"]\\\"}]\\) is a pattern object that can stand for any \
sequence of one or more \\!\\(\\*StyleBox[\\\"Wolfram Language\\\", \
\\\"RebrandingTerm\\\"]\\) expressions. \\n\\!\\(\\*StyleBox[RowBox[{\\\"__\\\
\", StyleBox[\\\"h\\\", \\\"TI\\\"]}]]\\) or \
\\!\\(\\*RowBox[{\\\"BlankSequence\\\", \\\"[\\\", StyleBox[\\\"h\\\", \\\"TI\
\\\"], \\\"]\\\"}]\\) can stand for any sequence of one or more expressions, \
all of which have head \\!\\(\\*StyleBox[\\\"h\\\", \\\"TI\\\"]\\). \"\>", 
   "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/BlankSequence"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.66810989580757*^9},
 CellTags->"Info-a9a6db7e-dc51-4798-818a-34246f7176ec"]
}, Open  ]],

Cell["Now we can do:", "Text",
 CellChangeTimes->{{3.668208456991487*^9, 3.668208458343444*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a__", ",", "1", ",", "2", ",", "3", ",", "b__"}], "}"}], 
   "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"a", ",", "\"\<Eureka\>\"", ",", "b"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.668109902981854*^9, 3.6681099204834747`*^9}, {
  3.668208464199317*^9, 3.668208465431016*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"35", ",", "81", ",", "\<\"Eureka\"\>", ",", "15", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668109920922489*^9, 3.6682084656732817`*^9}]
}, Open  ]],

Cell["\<\
That worked well, but what if the sequence of 1, 2, 3 appeared in the \
beginning or the end of the list?  \
\>", "Text",
 CellChangeTimes->{{3.668109925266645*^9, 3.668109960329721*^9}, {
  3.6682084809032593`*^9, 3.6682084892782393`*^9}, {3.682539662251668*^9, 
  3.682539670367015*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RotateLeft", "[", 
   RowBox[{"list", ",", "2"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a__", ",", "1", ",", "2", ",", "3", ",", "b__"}], "}"}], 
   "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"a", ",", "\"\<Eureka\>\"", ",", "b"}], "}"}]}]}]], "Input",
 CellChangeTimes->{3.66820852379114*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "15", ",", "20", ",", "35", ",", "81"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668109976323442*^9, 3.6682085250562763`*^9}]
}, Open  ]],

Cell[TextData[{
 "Nothing happened! Because ",
 StyleBox["BlankSequence", "Code"],
 "s match one or more elements. If we want to match a pattern of zero or more \
elements, we use ",
 StyleBox["BlankNullSequence", "Code"],
 " aka triple underscore (",
 StyleBox["___", "Code"],
 "):"
}], "Text",
 CellChangeTimes->{{3.6681099787873163`*^9, 3.6681100232645283`*^9}, {
   3.668110058465075*^9, 3.668110062391465*^9}, {3.668208529061167*^9, 
   3.668208569595747*^9}, 3.668215314050625*^9, 3.682539712747087*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RotateLeft", "[", 
   RowBox[{"list", ",", "2"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a___", ",", "1", ",", "2", ",", "3", ",", "b___"}], "}"}], 
   "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"a", ",", "\"\<Eureka\>\"", ",", "b"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.668110036362361*^9, 3.668110038008493*^9}, 
   3.668208573895007*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Eureka\"\>", ",", "15", ",", "20", ",", "35", ",", "81"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668110038231738*^9, 3.6682085753633823`*^9}]
}, Open  ]],

Cell[TextData[{
 "This is truly powerful. Take a deep breath! You made it. In the next \
lecture we\[CloseCurlyQuote]ll look at ",
 StyleBox["PatternTests", "Code"],
 " and ",
 StyleBox["Conditions", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.668110042879972*^9, 3.668110048799687*^9}, 
   3.668208595555542*^9, {3.668210126110301*^9, 3.668210154980855*^9}, {
   3.6682136564939413`*^9, 3.668213772847114*^9}, {3.68254027234025*^9, 
   3.6825402726040487`*^9}, {3.6825405042222652`*^9, 3.682540511128055*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{827, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-e3f71035-09fb-4cff-a39d-c77cabfed705"->{
  Cell[16355, 317, 687, 15, 52, "Print",
   CellTags->"Info-e3f71035-09fb-4cff-a39d-c77cabfed705"]},
 "Info-40dbc8a4-ea25-4031-a8e6-86d81ebe3490"->{
  Cell[18310, 374, 772, 15, 77, "Print",
   CellTags->"Info-40dbc8a4-ea25-4031-a8e6-86d81ebe3490"]},
 "Info-1fafab22-ab65-4a8c-a0e1-e0e4f4a02613"->{
  Cell[56248, 1153, 557, 12, 52, "Print",
   CellTags->"Info-1fafab22-ab65-4a8c-a0e1-e0e4f4a02613"]},
 "Info-9d067502-4bd1-4728-955f-e14e7f41c682"->{
  Cell[61841, 1331, 829, 16, 77, "Print",
   CellTags->"Info-9d067502-4bd1-4728-955f-e14e7f41c682"]},
 "Info-754393f8-e9b6-4f35-b9bb-bfe060629e0e"->{
  Cell[64019, 1396, 789, 16, 77, "Print",
   CellTags->"Info-754393f8-e9b6-4f35-b9bb-bfe060629e0e"]},
 "Info-0e61a647-18e8-4183-b0b5-cd3112e4dd82"->{
  Cell[71443, 1629, 565, 12, 52, "Print",
   CellTags->"Info-0e61a647-18e8-4183-b0b5-cd3112e4dd82"]},
 "Info-cf052604-06b7-4446-a32a-f5b6efeabd11"->{
  Cell[74257, 1712, 2342, 39, 149, "Print",
   CellTags->"Info-cf052604-06b7-4446-a32a-f5b6efeabd11"]},
 "Info-a9a6db7e-dc51-4798-818a-34246f7176ec"->{
  Cell[78894, 1828, 900, 17, 125, "Print",
   CellTags->"Info-a9a6db7e-dc51-4798-818a-34246f7176ec"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-e3f71035-09fb-4cff-a39d-c77cabfed705", 83424, 1964},
 {"Info-40dbc8a4-ea25-4031-a8e6-86d81ebe3490", 83573, 1967},
 {"Info-1fafab22-ab65-4a8c-a0e1-e0e4f4a02613", 83722, 1970},
 {"Info-9d067502-4bd1-4728-955f-e14e7f41c682", 83872, 1973},
 {"Info-754393f8-e9b6-4f35-b9bb-bfe060629e0e", 84022, 1976},
 {"Info-0e61a647-18e8-4183-b0b5-cd3112e4dd82", 84172, 1979},
 {"Info-cf052604-06b7-4446-a32a-f5b6efeabd11", 84322, 1982},
 {"Info-a9a6db7e-dc51-4798-818a-34246f7176ec", 84474, 1985}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 92, 1, 80, "Section"],
Cell[675, 25, 272, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[972, 35, 310, 8, 39, "Input"],
Cell[1285, 45, 14597, 252, 102, "Output"]
}, Open  ]],
Cell[15897, 300, 317, 9, 61, "Text"],
Cell[CellGroupData[{
Cell[16239, 313, 113, 2, 39, "Input"],
Cell[16355, 317, 687, 15, 52, "Print",
 CellTags->"Info-e3f71035-09fb-4cff-a39d-c77cabfed705"]
}, Open  ]],
Cell[17057, 335, 140, 2, 37, "Text"],
Cell[CellGroupData[{
Cell[17222, 341, 312, 7, 39, "Input"],
Cell[17537, 350, 205, 5, 39, "Output"]
}, Open  ]],
Cell[17757, 358, 404, 8, 61, "Text"],
Cell[CellGroupData[{
Cell[18186, 370, 121, 2, 39, "Input"],
Cell[18310, 374, 772, 15, 77, "Print",
 CellTags->"Info-40dbc8a4-ea25-4031-a8e6-86d81ebe3490"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19119, 394, 378, 7, 39, "Input"],
Cell[19500, 403, 307, 7, 39, "Output"]
}, Open  ]],
Cell[19822, 413, 475, 11, 85, "Text"],
Cell[CellGroupData[{
Cell[20322, 428, 153, 3, 39, "Input"],
Cell[20478, 433, 184, 4, 39, "Output"]
}, Open  ]],
Cell[20677, 440, 401, 7, 37, "Text"],
Cell[CellGroupData[{
Cell[21103, 451, 279, 7, 39, "Input"],
Cell[21385, 460, 197, 5, 39, "Output"]
}, Open  ]],
Cell[21597, 468, 286, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[21908, 480, 518, 15, 39, "Input"],
Cell[22429, 497, 29315, 505, 104, "Output"]
}, Open  ]],
Cell[51759, 1005, 533, 12, 85, "Text"],
Cell[CellGroupData[{
Cell[52317, 1021, 177, 4, 39, "Input"],
Cell[52497, 1027, 120, 2, 39, "Output"]
}, Open  ]],
Cell[52632, 1032, 192, 2, 37, "Text"],
Cell[CellGroupData[{
Cell[52849, 1038, 179, 4, 39, "Input"],
Cell[53031, 1044, 99, 2, 39, "Output"]
}, Open  ]],
Cell[53145, 1049, 208, 6, 37, "Text"],
Cell[CellGroupData[{
Cell[53378, 1059, 253, 7, 39, "Input"],
Cell[53634, 1068, 144, 3, 40, "Output"]
}, Open  ]],
Cell[53793, 1074, 249, 5, 37, "Text"],
Cell[CellGroupData[{
Cell[54067, 1083, 394, 8, 39, "Input"],
Cell[54464, 1093, 282, 7, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54783, 1105, 105, 1, 54, "Subsection"],
Cell[54891, 1108, 225, 6, 37, "Text"],
Cell[CellGroupData[{
Cell[55141, 1118, 357, 10, 39, "Input"],
Cell[55501, 1130, 273, 6, 39, "Output"]
}, Open  ]],
Cell[55789, 1139, 307, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[56121, 1149, 124, 2, 39, "Input"],
Cell[56248, 1153, 557, 12, 52, "Print",
 CellTags->"Info-1fafab22-ab65-4a8c-a0e1-e0e4f4a02613"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56842, 1170, 354, 10, 39, "Input"],
Cell[57199, 1182, 125, 3, 39, "Output"]
}, Open  ]],
Cell[57339, 1188, 161, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[57525, 1196, 454, 11, 39, "Input"],
Cell[57982, 1209, 174, 4, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58193, 1218, 359, 9, 39, "Input"],
Cell[58555, 1229, 249, 7, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58841, 1241, 312, 7, 39, "Input"],
Cell[59156, 1250, 249, 5, 39, "Output"]
}, Open  ]],
Cell[59420, 1258, 240, 5, 61, "Text"],
Cell[CellGroupData[{
Cell[59685, 1267, 253, 6, 39, "Input"],
Cell[59941, 1275, 176, 4, 39, "Output"]
}, Open  ]],
Cell[60132, 1282, 381, 7, 61, "Text"],
Cell[60516, 1291, 375, 7, 61, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60940, 1304, 95, 1, 80, "Section"],
Cell[61038, 1307, 353, 8, 37, "Text"],
Cell[61394, 1317, 304, 6, 85, "Text"],
Cell[CellGroupData[{
Cell[61723, 1327, 115, 2, 39, "Input"],
Cell[61841, 1331, 829, 16, 77, "Print",
 CellTags->"Info-9d067502-4bd1-4728-955f-e14e7f41c682"]
}, Open  ]],
Cell[62685, 1350, 236, 5, 61, "Text"],
Cell[CellGroupData[{
Cell[62946, 1359, 157, 3, 39, "Input"],
Cell[63106, 1364, 73, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63216, 1370, 156, 3, 39, "Input"],
Cell[63375, 1375, 76, 1, 39, "Output"]
}, Open  ]],
Cell[63466, 1379, 409, 9, 37, "Text"],
Cell[CellGroupData[{
Cell[63900, 1392, 116, 2, 39, "Input"],
Cell[64019, 1396, 789, 16, 77, "Print",
 CellTags->"Info-754393f8-e9b6-4f35-b9bb-bfe060629e0e"]
}, Open  ]],
Cell[64823, 1415, 262, 8, 61, "Text"],
Cell[CellGroupData[{
Cell[65110, 1427, 257, 6, 39, "Input"],
Cell[65370, 1435, 254, 6, 39, "Output"]
}, Open  ]],
Cell[65639, 1444, 118, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[65782, 1449, 309, 7, 39, "Input"],
Cell[66094, 1458, 382, 9, 39, "Output"]
}, Open  ]],
Cell[66491, 1470, 227, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[66743, 1482, 174, 3, 39, "Input"],
Cell[66920, 1487, 145, 2, 39, "Output"]
}, Open  ]],
Cell[67080, 1492, 318, 9, 37, "Text"],
Cell[CellGroupData[{
Cell[67423, 1505, 197, 3, 39, "Input"],
Cell[67623, 1510, 120, 2, 39, "Output"]
}, Open  ]],
Cell[67758, 1515, 540, 9, 85, "Text"],
Cell[CellGroupData[{
Cell[68323, 1528, 381, 8, 39, "Input"],
Cell[68707, 1538, 360, 8, 39, "Output"]
}, Open  ]],
Cell[69082, 1549, 257, 5, 61, "Text"],
Cell[CellGroupData[{
Cell[69364, 1558, 413, 8, 39, "Input"],
Cell[69780, 1568, 417, 9, 39, "Output"]
}, Open  ]],
Cell[70212, 1580, 316, 10, 61, "Text"],
Cell[CellGroupData[{
Cell[70553, 1594, 159, 3, 39, "Input"],
Cell[70715, 1599, 344, 11, 39, "Output"]
}, Open  ]],
Cell[71074, 1613, 223, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[71322, 1625, 118, 2, 39, "Input"],
Cell[71443, 1629, 565, 12, 52, "Print",
 CellTags->"Info-0e61a647-18e8-4183-b0b5-cd3112e4dd82"]
}, Open  ]],
Cell[72023, 1644, 441, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[72489, 1656, 157, 3, 39, "Input"],
Cell[72649, 1661, 78, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72764, 1667, 238, 6, 39, "Input"],
Cell[73005, 1675, 386, 10, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73428, 1690, 130, 2, 54, "Subsection"],
Cell[73561, 1694, 412, 7, 61, "Text"],
Cell[73976, 1703, 132, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[74133, 1708, 121, 2, 39, "Input"],
Cell[74257, 1712, 2342, 39, 149, "Print",
 CellTags->"Info-cf052604-06b7-4446-a32a-f5b6efeabd11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76636, 1756, 436, 11, 39, "Input"],
Cell[77075, 1769, 227, 6, 39, "Output"]
}, Open  ]],
Cell[77317, 1778, 308, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[77650, 1788, 409, 11, 39, "Input"],
Cell[78062, 1801, 214, 5, 39, "Output"]
}, Open  ]],
Cell[78291, 1809, 451, 11, 85, "Text"],
Cell[CellGroupData[{
Cell[78767, 1824, 124, 2, 39, "Input"],
Cell[78894, 1828, 900, 17, 125, "Print",
 CellTags->"Info-a9a6db7e-dc51-4798-818a-34246f7176ec"]
}, Open  ]],
Cell[79809, 1848, 96, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[79930, 1853, 358, 9, 39, "Input"],
Cell[80291, 1864, 189, 4, 39, "Output"]
}, Open  ]],
Cell[80495, 1871, 299, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[80819, 1881, 343, 10, 39, "Input"],
Cell[81165, 1893, 199, 5, 39, "Output"]
}, Open  ]],
Cell[81379, 1901, 509, 12, 85, "Text"],
Cell[CellGroupData[{
Cell[81913, 1917, 396, 11, 39, "Input"],
Cell[82312, 1930, 189, 4, 39, "Output"]
}, Open  ]],
Cell[82516, 1937, 514, 11, 61, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

