%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Boston University
% Department of Electrical and Computer Engineering
% EC522 Computational Optical Imaging
% Solutions to Homework No. 5 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Last modified by Shuyue Jia (brucejia@bu.edu), 3/17/2024

%% Problem 1: Deconvolution in defocus imaging

%% define Fourier transform operator
% notice the proper use of fftshift & ifftshift
F = @(x) fftshift(fft2(ifftshift(x)));
Ft = @(x) fftshift(ifft2(ifftshift(x)));

%% Problem 1A Simulate the output images, assuming no noise is present.
%% define operators that implement the inversion algorithms 

% a) direct deconvolution
DD = @(G,H) Ft(G./H);

% b) min-norm / generalized solution
% note that to implement generalized solution, we need to prefilter the
% image by H*, then the deconvolution is only for H that has non-zero
% values, in practice, this can be implemented as follows:
GS = @(G,H) Ft(conj(H).*G./(abs(H).^2+1e-31));
% the small value eps ensures numerical stability, it is also a nice trick
% to compute the min-norm solution.

% c) Tikhonov deconvolution
TD = @(G,H,mu) Ft(conj(H).*G./(abs(H).^2+mu));

%% define operators to compute various errors
% note that all the errors can be conviniently computed in the Fourier space
% according to the Parseval's theorem (lecture 6, slide 19)

%% load data
load I1;
load psf1;
load psf2;

%% setup spatial coordinate in x
dx = 1e-3; % in mm
N = size(I1,1);
x = [-N/2:N/2-1]*dx;

% the correponding spatial frequency coordinates
du = 1/N/dx;
u = [-N/2:N/2-1]*du;

%% output image of object
% compute Fourier function of I1
F1 = F(I1);

% compute transfer function of psf1
H1 = F(psf1);
% compute transfer function of psf2
H2 = F(psf2);

%% output images of objects for two measurements

% output image for the first measurement
g1 = Ft(F1.*H1);

% output image for the second measurement
g2 = Ft(F1.*H2);

% assuming no noise is present, the LS solution is the sum of the
% deconvolutions of the measurements with their respective PSFs
LS_solution = (DD(g1, H1) + DD(g2, H2)) / 2; % assuming equal weights for both measurements

figure(1); 
imagesc(I1); axis image; axis off; colormap gray;
title('The object'); 

figure(2); 
imagesc(g1); axis image; axis off; colormap gray;
title('The object under measurement 1');

figure(3); 
imagesc(g2); axis image; axis off; colormap gray;
title('The object under measurement 2');

subplot(2, 2, 4);
imagesc(abs(LS_solution)); axis image; axis off; colormap gray;
title('Least Squares (LS) Solution (Two Measurements)');

title('The object under both measurements');
