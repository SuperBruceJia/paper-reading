{"array-bracket-spacing":{"name":"array-bracket-spacing","value":["error","never"],"description":"不要在中括号中添加空格","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"eslint-error\" data-tip=\"There should be no space after &apos;[&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(array-bracket-spacing)&lt;/span&gt;\"> </mark><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><mark class=\"eslint-error\" data-tip=\"There should be no space before &apos;]&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(array-bracket-spacing)&lt;/span&gt;\"> </mark><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"array-callback-return":{"name":"array-callback-return","value":"warn","description":"数组的方法除了 forEach 之外，回调函数必须有返回值","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Expected to return a value in arrow function.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(array-callback-return)&lt;/span&gt;\">=</mark>></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"arrow-body-style":{"name":"arrow-body-style","value":["warn","as-needed"],"description":"要求箭头函数体使用大括号","category":"","badExample":"","goodExample":""},"arrow-parens":{"name":"arrow-parens","value":["warn","as-needed",{"requireForBlockBody":true}],"description":"要求箭头函数的参数使用圆括号","category":"","badExample":"<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"Expected parentheses around arrow function argument having a body with curly braces.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(arrow-parens)&lt;/span&gt;\">number</mark></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nextNumber <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token template-string\"><span class=\"token string\">`A string containing the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nextNumber<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"Expected parentheses around arrow function argument having a body with curly braces.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(arrow-parens)&lt;/span&gt;\">number</mark></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token string\">`A long string with the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. It’s so long that we don’t want it to take up space on the .map line!`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"Expected parentheses around arrow function argument having a body with curly braces.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(arrow-parens)&lt;/span&gt;\">x</mark></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`A string containing the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token string\">`A long string with the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. It’s so long that we don’t want it to take up space on the .map line!`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"arrow-spacing":{"name":"arrow-spacing","value":"warn","description":"强制箭头函数的箭头前后使用一致的空格","category":"","badExample":"","goodExample":""},"block-spacing":{"name":"block-spacing","value":"error","description":"要求打开的块标志和同一行上的标志拥有一致的间距。此规则还会在同一行关闭的块标记和前边的标记强制实施一致的间距。","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Requires a space after &apos;{&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(block-spacing)&lt;/span&gt;\">{</mark></span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Requires a space before &apos;}&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(block-spacing)&lt;/span&gt;\">}</mark></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Requires a space before &apos;}&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(block-spacing)&lt;/span&gt;\">}</mark></span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>"},"brace-style":{"name":"brace-style","value":"warn","description":"强制在代码块中使用一致的大括号风格","category":"","badExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">thing1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thing2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Closing curly brace does not appear on the same line as the subsequent block.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(brace-style)&lt;/span&gt;\">}</mark></span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">thing3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">thing1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thing2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">thing3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"camelcase":{"name":"camelcase","value":["error",{"ignoreDestructuring":true,"properties":"never"}],"description":"使用驼峰命名法（camelCase）命名对象、函数和实例。","category":"","badExample":"<span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Identifier &apos;foo_bar&apos; is not in camel case.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(camelcase)&lt;/span&gt;\">foo_bar</mark> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Identifier &apos;foo_baz&apos; is not in camel case.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(camelcase)&lt;/span&gt;\">foo_baz</mark></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">const</span> fooBar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fooBaz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> foo_bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token function\">fooBaz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  foo_bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"comma-dangle":{"name":"comma-dangle","value":["warn","always-multiline"],"description":"添加尾随逗号","category":"","badExample":"","goodExample":""},"comma-spacing":{"name":"comma-spacing","value":["error",{"before":false,"after":true}],"description":"强制在逗号前后使用一致的空格","category":"","badExample":"<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space before &apos;,&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-spacing)&lt;/span&gt;\">,</mark></span> <span class=\"token number\">2</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"A space is required after &apos;,&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-spacing)&lt;/span&gt;\">,</mark></span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>"},"comma-style":{"name":"comma-style","value":["error","last"],"description":"强制使用一致的逗号风格","category":"","badExample":"<span class=\"token keyword\">const</span> story <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  once\n  <span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"&apos;,&apos; should be placed last.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-style)&lt;/span&gt;\"> </mark>upon\n  <span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"&apos;,&apos; should be placed last.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-style)&lt;/span&gt;\"> </mark>aTime\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Ada'</span>\n  <span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"&apos;,&apos; should be placed last.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-style)&lt;/span&gt;\"> </mark>lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lovelace'</span>\n  <span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"&apos;,&apos; should be placed last.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-style)&lt;/span&gt;\"> </mark>birthYear<span class=\"token punctuation\">:</span> <span class=\"token number\">1815</span>\n  <span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"&apos;,&apos; should be placed last.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(comma-style)&lt;/span&gt;\"> </mark>superPower<span class=\"token punctuation\">:</span> <span class=\"token string\">'computers'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> story <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  once<span class=\"token punctuation\">,</span>\n  upon<span class=\"token punctuation\">,</span>\n  aTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Ada'</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lovelace'</span><span class=\"token punctuation\">,</span>\n  birthYear<span class=\"token punctuation\">:</span> <span class=\"token number\">1815</span><span class=\"token punctuation\">,</span>\n  superPower<span class=\"token punctuation\">:</span> <span class=\"token string\">'computers'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"computed-property-spacing":{"name":"computed-property-spacing","value":["warn","never"],"description":"强制在计算的属性的方括号中使用一致的空格","category":"","badExample":"obj<span class=\"token punctuation\">[</span>foo <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space before &apos;]&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">]</mark></span>\nobj<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space after &apos;[&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">[</mark></span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space after &apos;[&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">[</mark></span> b <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space before &apos;]&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">]</mark></span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space after &apos;[&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">[</mark></span> bar <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"There should be no space before &apos;]&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(computed-property-spacing)&lt;/span&gt;\">]</mark></span><span class=\"token punctuation\">]</span>","goodExample":"obj<span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">[</span>bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>"},"dot-notation":{"name":"dot-notation","value":"warn","description":"禁止使用 foo['bar']，必须写成 foo.bar","category":"","badExample":"foo<span class=\"token punctuation\">[</span><span class=\"token string\"><mark class=\"eslint-error\" data-tip=\"[&quot;bar&quot;] is better written in dot notation.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(dot-notation)&lt;/span&gt;\">'bar'</mark></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>","goodExample":"foo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>"},"eol-last":{"name":"eol-last","value":["error","always"],"description":"要求或禁止文件末尾存在空行","category":"","badExample":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> es6 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./TencentJSStyleGuide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> es6<span class=\"token punctuation\">;</span><mark class=\"eslint-error\" data-tip=\"Newline required at end of file but not found.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(eol-last)&lt;/span&gt;\"></mark>>","goodExample":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> es6 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./TencentJSStyleGuide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> es6<span class=\"token punctuation\">;</span>"},"eqeqeq":{"name":"eqeqeq","value":["warn","always"],"description":"必须使用 === 或 !==，禁止使用 == 或 !=","category":"","badExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Expected &apos;===&apos; and instead saw &apos;==&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(eqeqeq)&lt;/span&gt;\">==</mark></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Expected &apos;!==&apos; and instead saw &apos;!=&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(eqeqeq)&lt;/span&gt;\">!=</mark></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>"},"func-call-spacing":{"name":"func-call-spacing","value":["error","never"],"description":"要求或禁止在函数标识符和其调用之间有空格","category":"","badExample":"<span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Unexpected newline between function name and paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(func-call-spacing)&lt;/span&gt;\">f</mark>unc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Unexpected newline between function name and paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(func-call-spacing)&lt;/span&gt;\">f</mark>unc</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"func-style":{"name":"func-style","value":["warn","expression"],"description":"必须只使用函数声明或只使用函数表达式","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Expected a function expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(func-style)&lt;/span&gt;\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"function-paren-newline":{"name":"function-paren-newline","value":["warn","multiline"],"description":"强制在函数括号内使用一致的换行","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected newline after &apos;(&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(function-paren-newline)&lt;/span&gt;\">(</mark></span><span class=\"token parameter\">bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">,</span>\n  quux</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected newline before &apos;)&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(function-paren-newline)&lt;/span&gt;\">)</mark></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected newline after &apos;(&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(function-paren-newline)&lt;/span&gt;\">(</mark></span>foo<span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected newline before &apos;)&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(function-paren-newline)&lt;/span&gt;\">)</mark></span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">,</span>\n  quux<span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  foo<span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"generator-star-spacing":{"name":"generator-star-spacing","value":["warn",{"before":false,"after":true}],"description":"强制 generator 函数中 * 号周围使用一致的空格","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected space before *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected space before *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected space before *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\"><mark class=\"eslint-error\" data-tip=\"Missing space after *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></mark></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quux</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Missing space after *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Missing space after *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected space before *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\"><mark class=\"eslint-error\" data-tip=\"Missing space after *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></mark></span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span>\n<span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected space before *.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(generator-star-spacing)&lt;/span&gt;\">*</mark></span>\n<span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"id-length":{"name":"id-length","value":"off","description":"限制变量名长度","category":"","badExample":"","goodExample":"<span class=\"token keyword\">const</span> fo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>"},"implicit-arrow-linebreak":{"name":"implicit-arrow-linebreak","value":["warn","beside"],"description":"强制隐式返回的箭头函数体的位置","category":"","badExample":"<span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <mark class=\"eslint-error\" data-tip=\"Expected no linebreak before this expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(implicit-arrow-linebreak)&lt;/span&gt;\">bar</mark><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected no linebreak before this expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(implicit-arrow-linebreak)&lt;/span&gt;\">(</mark></span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  bar\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"indent":{"name":"indent","value":["warn",2,{"SwitchCase":1,"VariableDeclarator":1,"outerIIFEBody":1,"FunctionDeclaration":{"parameters":1,"body":1},"FunctionExpression":{"parameters":1,"body":1},"CallExpression":{"arguments":1},"ArrayExpression":1,"ObjectExpression":1,"ImportDeclaration":1,"flatTernaryExpressions":false,"ignoredNodes":["JSXElement","JSXElement > *","JSXAttribute","JSXIdentifier","JSXNamespacedName","JSXMemberExpression","JSXSpreadAttribute","JSXExpressionContainer","JSXOpeningElement","JSXClosingElement","JSXFragment","JSXOpeningFragment","JSXClosingFragment","JSXText","JSXEmptyExpression","JSXSpreadChild"],"ignoreComments":false}],"description":"使用 2 个空格缩进","category":"","badExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 4 spaces but found 8.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">        </mark><span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 6 spaces but found 12.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">            </mark>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 6 spaces but found 12.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">            </mark><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 4 spaces but found 8.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">        </mark><span class=\"token punctuation\">}</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token punctuation\">}</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token comment\">/** baz func */</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 4 spaces but found 8.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">        </mark>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 2 spaces but found 4.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(indent)&lt;/span&gt;\">    </mark><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/** baz func */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"},"key-spacing":{"name":"key-spacing","value":"error","description":"强制在对象字面量的属性中键和值之间使用一致的间距","category":"","badExample":"<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <mark class=\"eslint-error\" data-tip=\"Extra space after key &apos;foo&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(key-spacing)&lt;/span&gt;\">f</mark>oo <span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span><span class=\"token number\"><mark class=\"eslint-error\" data-tip=\"Missing space before value for key &apos;foo&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(key-spacing)&lt;/span&gt;\">4</mark>2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"keyword-spacing":{"name":"keyword-spacing","value":["error",{"overrides":{"if":{"after":true},"for":{"after":true},"while":{"after":true},"else":{"after":true}}}],"description":"强制在关键字前后使用一致的空格","category":"","badExample":"<span class=\"token keyword\"><mark class=\"eslint-error\" data-tip=\"Expected space(s) after &quot;if&quot;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(keyword-spacing)&lt;/span&gt;\">i</mark>f</span><span class=\"token punctuation\">(</span>isJedi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fight</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isJedi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"max-len":{"name":"max-len","value":["error",{"code":100,"ignoreStrings":true,"ignoreUrls":true,"ignoreRegExpLiterals":true,"ignoreTemplateLiterals":true}],"description":"强制一行的最大长度，限制单行不能超过100个字符，字符串和正则表达式除外。","category":"","badExample":"<span class=\"token keyword\"><mark class=\"eslint-error\" data-tip=\"This line has a length of 145. Maximum allowed is 100.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(max-len)&lt;/span&gt;\">c</mark>onst</span> foo <span class=\"token operator\">=</span> jsonData <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">.</span>quux <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">.</span>quux<span class=\"token punctuation\">.</span>xyzzy<span class=\"token punctuation\">;</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://airbnb.com/'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Congratulations!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You have failed this city.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> jsonData\n  <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo\n  <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar\n  <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz\n  <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">.</span>quux\n  <span class=\"token operator\">&amp;&amp;</span> jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">.</span>quux<span class=\"token punctuation\">.</span>xyzzy<span class=\"token punctuation\">;</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://airbnb.com/'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Congratulations!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You have failed this city.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'The quick brown fox jumps over the lazy dog, the another quick brown fox jumps over the lazy dog, the 3rd quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> templateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonData<span class=\"token punctuation\">.</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> The quick brown fox jumps over the lazy dog, the another quick brown fox jumps over the lazy dog, the 3rd quick brown fox jumps over the lazy dog`</span></span><span class=\"token punctuation\">;</span>"},"new-cap":{"name":"new-cap","value":["error",{"properties":false}],"description":"只有在命名构造器或者类的时候，才用帕斯卡拼命名法（PascalCase），即首字母大写。","category":"","badExample":"<span class=\"token keyword\">new</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"A constructor name should not start with a lowercase letter.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(new-cap)&lt;/span&gt;\">f</mark>oo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">foo<span class=\"token punctuation\">.</span>bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"newline-per-chained-call":{"name":"newline-per-chained-call","value":["warn",{"ignoreChainWithDepth":2}],"description":"在编写多个方法链式调用(超过两个方法链式调用)时。 使用前导点，强调这行是一个方法调用，而不是一个语句。","category":"","badExample":"<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Expected line break before `.highlight`.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(newline-per-chained-call)&lt;/span&gt;\">h</mark>ighlight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Expected line break before `.end`.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(newline-per-chained-call)&lt;/span&gt;\">e</mark>nd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Expected line break before `.find`.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(newline-per-chained-call)&lt;/span&gt;\">f</mark>ind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Expected line break before `.updateCount`.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(newline-per-chained-call)&lt;/span&gt;\">u</mark>pdateCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#items'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.selected'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.open'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">updateCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-array-constructor":{"name":"no-array-constructor","value":["error"],"description":"使用字面量语法创建数组。","category":"","badExample":"<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"The array literal notation [] is preferable.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-array-constructor)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>"},"no-case-declarations":{"name":"no-case-declarations","value":"error","description":"在 case 和 default 的子句中，如果存在声明 (例如. let, const, function, 和 class)，使用大括号来创建块级作用域。","category":"","badExample":"<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <mark class=\"eslint-error\" data-tip=\"Unexpected lexical declaration in case block.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-case-declarations)&lt;/span&gt;\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></mark>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"},"no-confusing-arrow":{"name":"no-confusing-arrow","value":"warn","description":"避免搞混箭头函数符号 (=>) 和比较运算符 (<=, >=)。","category":"","badExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">itemHeight</span> <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Arrow function used ambiguously with a conditional expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-confusing-arrow)&lt;/span&gt;\"><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> <span class=\"token number\">256</span> <span class=\"token operator\">?</span> item<span class=\"token punctuation\">.</span>largeSize <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>smallSize</mark><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anotherItemHeight</span> <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Arrow function used ambiguously with a conditional expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-confusing-arrow)&lt;/span&gt;\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> <span class=\"token number\">256</span> <span class=\"token operator\">?</span> item<span class=\"token punctuation\">.</span>largeSize <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>smallSize</mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">itemHeight</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> <span class=\"token number\">256</span> <span class=\"token operator\">?</span> item<span class=\"token punctuation\">.</span>largeSize <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>smallSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anotherItemHeight</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">,</span> largeSize<span class=\"token punctuation\">,</span> smallSize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> height <span class=\"token operator\">></span> <span class=\"token number\">256</span> <span class=\"token operator\">?</span> largeSize <span class=\"token punctuation\">:</span> smallSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"no-const-assign":{"name":"no-const-assign","value":"error","description":"禁止对使用 const 定义的常量重新赋值","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"&apos;foo&apos; is constant.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-const-assign)&lt;/span&gt;\">foo</mark> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> bar <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-dupe-class-members":{"name":"no-dupe-class-members","value":"error","description":"禁止重复定义类的成员","category":"","badExample":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <mark class=\"eslint-error\" data-tip=\"Duplicate name &apos;bar&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-dupe-class-members)&lt;/span&gt;\"><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"},"no-else-return":{"name":"no-else-return","value":["warn",{"allowElseIf":false}],"description":"禁止在 else 内使用 return，必须改为提前结束","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <mark class=\"eslint-error\" data-tip=\"Unnecessary &apos;else&apos; after &apos;return&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-else-return)&lt;/span&gt;\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> baz<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> baz<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-eval":{"name":"no-eval","value":"error","description":"禁止使用 eval","category":"","badExample":"<span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"eval can be harmful.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-eval)&lt;/span&gt;\">e</mark>val</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const foo = 0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>"},"no-iterator":{"name":"no-iterator","value":"warn","description":"不要使用迭代器。","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Reserved name &apos;__iterator__&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-iterator)&lt;/span&gt;\"><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">__iterator__</span></mark> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FooIterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3]</span>","reason":"推荐使用 JavaScript 的高阶函数代替 for-in 或者 for-of。"},"no-loop-func":{"name":"no-loop-func","value":"error","description":"禁止在循环内的函数内部出现循环体条件语句中定义的变量","category":"","badExample":"<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><mark class=\"eslint-error\" data-tip=\"Function declared in a loop contains unsafe references to variable(s) &apos;i&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-loop-func)&lt;/span&gt;\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-mixed-operators":{"name":"no-mixed-operators","value":["error",{"allowSamePrecedence":true}],"description":"禁止混合使用不同的操作符","category":"","badExample":"<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> a <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;&amp;&amp;&apos; and &apos;||&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">&amp;&amp;</mark></span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;&amp;&amp;&apos; and &apos;||&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">||</mark></span> c <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> d <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> a <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;**&apos; and &apos;-&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">**</mark></span> b <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;**&apos; and &apos;-&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;-&apos; and &apos;%&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">-</mark></mark></span> <span class=\"token number\">5</span> <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;-&apos; and &apos;%&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">%</mark></span> d<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bad, 可能陷入一种 (a || b) &amp;&amp; c 的思考</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;||&apos; and &apos;&amp;&amp;&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">||</mark></span> b <span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Unexpected mix of &apos;||&apos; and &apos;&amp;&amp;&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-mixed-operators)&lt;/span&gt;\">&amp;&amp;</mark></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">**</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">%</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> bar1 <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">/</span> c <span class=\"token operator\">*</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-multi-assign":{"name":"no-multi-assign","value":"error","description":"禁止连续赋值，比如 foo = bar = 1","category":"","badExample":"<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n  * JavaScript 把它解释为\n  * let a = ( b = ( c = 1 ) );\n  * let 关键词只适用于变量 a，变量 b 和变量 c 则变成了全局变量。\n  */</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Unexpected chained assignment.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-multi-assign)&lt;/span&gt;\">b <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Unexpected chained assignment.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-multi-assign)&lt;/span&gt;\">c <span class=\"token operator\">=</span> <span class=\"token number\">1</span></mark></mark><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws ReferenceError</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws ReferenceError</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// throws ReferenceError</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// throws ReferenceError</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-multiple-empty-lines":{"name":"no-multiple-empty-lines","value":"error","description":"不要使用多个空行填充代码。","category":"","badExample":"<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><mark class=\"eslint-error\" data-tip=\"More than 2 blank lines not allowed.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-multiple-empty-lines)&lt;/span&gt;\"></mark>","goodExample":"<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>"},"no-nested-ternary":{"name":"no-nested-ternary","value":"warn","description":"禁止使用嵌套的三元表达式，比如 a ? b : c ? d : e","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Do not nest ternary expressions.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-nested-ternary)&lt;/span&gt;\">a <span class=\"token operator\">?</span> b <span class=\"token punctuation\">:</span> c <span class=\"token operator\">?</span> d <span class=\"token punctuation\">:</span> e</mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  foo <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  foo <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  foo <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-new-func":{"name":"no-new-func","value":"error","description":"禁止使用 new Function","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"The Function constructor is eval.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-new-func)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","reason":"这和 eval 是等价的"},"no-new-object":{"name":"no-new-object","value":"error","description":"禁止直接 new Object","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"The object literal notation {} is preferrable.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-new-object)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"no-new-wrappers":{"name":"no-new-wrappers","value":"warn","description":"禁止使用 new 来生成 String, Number 或 Boolean","category":"","badExample":"<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Do not use String as a constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-new-wrappers)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Do not use Number as a constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-new-wrappers)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Do not use Boolean as a constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-new-wrappers)&lt;/span&gt;\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-param-reassign":{"name":"no-param-reassign","value":["warn",{"props":true}],"description":"禁止对函数的参数重新赋值","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <mark class=\"eslint-error\" data-tip=\"Assignment to property of function parameter &apos;obj&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-param-reassign)&lt;/span&gt;\">obj</mark><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <mark class=\"eslint-error\" data-tip=\"Assignment to function parameter &apos;obj&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-param-reassign)&lt;/span&gt;\">obj</mark> <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj<span class=\"token punctuation\">.</span>key <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n  foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-plusplus":{"name":"no-plusplus","value":["error",{"allowForLoopAfterthoughts":true}],"description":"禁止使用 ++ 或 --","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Unary operator &apos;++&apos; used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-plusplus)&lt;/span&gt;\">foo<span class=\"token operator\">++</span></mark><span class=\"token punctuation\">;</span>","goodExample":"foo <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Not good but accepatble so far.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"no-prototype-builtins":{"name":"no-prototype-builtins","value":"error","description":"禁止使用 hasOwnProperty, isPrototypeOf 或 propertyIsEnumerable","category":"","badExample":"foo<span class=\"token punctuation\">.</span><span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"Do not access Object.prototype method &apos;hasOwnProperty&apos; from target object.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-prototype-builtins)&lt;/span&gt;\">h</mark>asOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-restricted-properties":{"name":"no-restricted-properties","value":["warn",{"object":"Math","property":"pow","message":"Please use ** instand"}],"description":"计算指数时，可以使用 ** 运算符。","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"&apos;Math.pow&apos; is restricted from being used. Please use ** instand&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-restricted-properties)&lt;/span&gt;\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span></mark><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>"},"no-restricted-syntax":{"name":"no-restricted-syntax","value":["warn",{"selector":"ForInStatement","message":"for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."},{"selector":"ForOfStatement","message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."},{"selector":"LabeledStatement","message":"Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."},{"selector":"WithStatement","message":"`with` is disallowed in strict mode because it makes code impossible to predict and optimize."}],"description":"推荐使用 JavaScript 的高阶函数代替 for-in 或者 for-of","category":"","badExample":"<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-restricted-syntax)&lt;/span&gt;\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></mark>\nsum <span class=\"token operator\">===</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsum <span class=\"token operator\">===</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>"},"no-trailing-spaces":{"name":"no-trailing-spaces","value":"error","description":"避免在行尾添加空格。","category":"","badExample":"","goodExample":""},"no-undef":{"name":"no-undef","value":["error"],"description":"变量应先声明再使用，禁止引用任何未声明的变量，除非你明确知道引用的变量存在于当前作用域链上。","category":"","badExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"&apos;args&apos; is not defined.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-undef)&lt;/span&gt;\">args</mark><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">,</span>\n    <mark class=\"eslint-error\" data-tip=\"&apos;args&apos; is not defined.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-undef)&lt;/span&gt;\">args</mark>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> args <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">,</span>\n    args\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"},"no-underscore-dangle":{"name":"no-underscore-dangle","value":"warn","description":"禁止变量名出现下划线","category":"","badExample":"<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"Unexpected dangling &apos;_&apos; in &apos;foo_&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-underscore-dangle)&lt;/span&gt;\">foo_</mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"Unexpected dangling &apos;_&apos; in &apos;__proto__&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-underscore-dangle)&lt;/span&gt;\">__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Unexpected dangling &apos;_&apos; in &apos;_bar&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-underscore-dangle)&lt;/span&gt;\">foo<span class=\"token punctuation\">.</span><span class=\"token function\">_bar</span></mark><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> __filename<span class=\"token punctuation\">;</span>"},"no-unneeded-ternary":{"name":"no-unneeded-ternary","value":"warn","description":"必须使用 !a 替代 a ? false : true","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> a <span class=\"token operator\">?</span> <span class=\"token boolean\"><mark class=\"eslint-error\" data-tip=\"Unnecessary use of boolean literals in conditional expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unneeded-ternary)&lt;/span&gt;\">f</mark>alse</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">;</span>"},"no-unused-vars":{"name":"no-unused-vars","value":["error",{"args":"after-used","ignoreRestSiblings":true}],"description":"已定义的变量必须使用\n但不检查最后一个使用的参数之前的参数\n也不检查 rest 属性的兄弟属性","category":"","badExample":"<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"&apos;foo&apos; is assigned a value but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">foo</mark> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><mark class=\"eslint-error\" data-tip=\"&apos;bar&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">bar</mark></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"&apos;baz&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">baz</mark></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> baz<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><mark class=\"eslint-error\" data-tip=\"&apos;rest&apos; is assigned a value but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">rest</mark> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> <mark class=\"eslint-error\" data-tip=\"&apos;baz&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">baz</mark><span class=\"token punctuation\">,</span> <mark class=\"eslint-error\" data-tip=\"&apos;qux&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">qux</mark></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">baz</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> baz<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">,</span> qux</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> qux<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"no-useless-constructor":{"name":"no-useless-constructor","value":"warn","description":"禁止出现没必要的 constructor","category":"","badExample":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Jedi</span> <span class=\"token punctuation\">{</span>\n  <mark class=\"eslint-error\" data-tip=\"Useless constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-constructor)&lt;/span&gt;\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rey</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Jedi</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这种构造函数是不需要写的</span>\n  <mark class=\"eslint-error\" data-tip=\"Useless constructor.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-constructor)&lt;/span&gt;\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">class</span> <span class=\"token class-name\">Jedi</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'Jedi'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rey</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Jedi</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Rey'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"},"no-useless-escape":{"name":"no-useless-escape","value":"error","description":"禁止出现没必要的转义","category":"","badExample":"<span class=\"token string\">\"<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>'\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\&quot;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>\"'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\#.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>#'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\e.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>e'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\&quot;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>\"`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\&quot;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\&quot;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>\"`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\#.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>#{foo}`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token regex\">/<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\!.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>!/</span><span class=\"token punctuation\">;</span>\n<span class=\"token regex\">/<mark class=\"eslint-error\" data-tip=\"Unnecessary escape character: \\@.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-useless-escape)&lt;/span&gt;\">\\</mark>@/</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'\\''</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'\\x12'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'\\u00a9'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'xs\\u2111'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`\\``</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`\\</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`$\\{</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token regex\">/\\\\/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token regex\">/\\t/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token regex\">/\\w\\$\\*\\^\\./</span><span class=\"token punctuation\">;</span>"},"no-var":{"name":"no-var","value":"error","description":"禁止使用 var","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Unexpected var, use let or const instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-var)&lt;/span&gt;\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></mark>","goodExample":"<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>"},"no-whitespace-before-property":{"name":"no-whitespace-before-property","value":"warn","description":"禁止属性前有空白","category":"","badExample":"","goodExample":""},"nonblock-statement-body-position":{"name":"nonblock-statement-body-position","value":["error","beside"],"description":"强制单个语句的位置","category":"","badExample":"<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n  <mark class=\"eslint-error\" data-tip=\"Expected no linebreak before this statement.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(nonblock-statement-body-position)&lt;/span&gt;\"><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></mark>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在缩进不规范的时候，容易造成误解</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\n  <mark class=\"eslint-error\" data-tip=\"Expected no linebreak before this statement.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(nonblock-statement-body-position)&lt;/span&gt;\">condition <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></mark>\n  test <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"object-curly-spacing":{"name":"object-curly-spacing","value":["warn","always"],"description":"强制在大括号中使用一致的空格","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"A space is required after &apos;{&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(object-curly-spacing)&lt;/span&gt;\">{</mark></span>clark<span class=\"token punctuation\">:</span> <span class=\"token string\">'kent'</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"A space is required before &apos;}&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(object-curly-spacing)&lt;/span&gt;\">}</mark></span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clark<span class=\"token punctuation\">:</span> <span class=\"token string\">'kent'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"object-shorthand":{"name":"object-shorthand","value":"warn","description":"将对象方法、属性简写，且间歇属性放在前面。","category":"","badExample":"<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> atom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <mark class=\"eslint-error\" data-tip=\"Expected property shorthand.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(object-shorthand)&lt;/span&gt;\">value<span class=\"token punctuation\">:</span> value</mark><span class=\"token punctuation\">,</span>\n  <mark class=\"eslint-error\" data-tip=\"Expected method shorthand.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(object-shorthand)&lt;/span&gt;\"><span class=\"token function-variable function\">addValue</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> atom<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> atom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> atom<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"one-var":{"name":"one-var","value":["warn","never"],"description":"禁止变量申明时用逗号一次申明多个","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Split &apos;let&apos; declarations into multiple statements.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(one-var)&lt;/span&gt;\"><span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">;</span></mark>\n<mark class=\"eslint-error\" data-tip=\"Split &apos;const&apos; declarations into multiple statements.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(one-var)&lt;/span&gt;\"><span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  qux <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></mark>","goodExample":"<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> qux <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>"},"operator-linebreak":{"name":"operator-linebreak","value":"error","description":"避免在赋值语句 = 前后换行。如果你的代码单行长度超过了 max-len 定义的长度而不得不换行， 那么使用括号包裹。","category":"","badExample":"<span class=\"token keyword\">const</span> foo\n  <span class=\"token operator\">=</span><mark class=\"eslint-error\" data-tip=\"&apos;=&apos; should be placed at the end of the line.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(operator-linebreak)&lt;/span&gt;\"> </mark><span class=\"token string\">'superLongLongLongLongLongLongLongLongString'</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'superLongLongLongLongLongLongLongLongString'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"padded-blocks":{"name":"padded-blocks","value":["error","never"],"description":"要求或禁止块内填充","category":"","badExample":"<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Block must not be padded by blank lines.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(padded-blocks)&lt;/span&gt;\">{</mark></span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Block must not be padded by blank lines.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(padded-blocks)&lt;/span&gt;\">}</mark></span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Block must not be padded by blank lines.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(padded-blocks)&lt;/span&gt;\">{</mark></span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>qux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Block must not be padded by blank lines.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(padded-blocks)&lt;/span&gt;\">}</mark></span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Block must not be padded by blank lines.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(padded-blocks)&lt;/span&gt;\">{</mark></span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>qux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"prefer-arrow-callback":{"name":"prefer-arrow-callback","value":"warn","description":"要求回调函数使用箭头函数","category":"","badExample":"<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><mark class=\"eslint-error\" data-tip=\"Unexpected function expression.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-arrow-callback)&lt;/span&gt;\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"prefer-const":{"name":"prefer-const","value":["error",{"destructuring":"any","ignoreReadBeforeAssign":false}],"description":"申明后不再被修改的变量必须使用 const 来申明","category":"","badExample":"<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"&apos;foo&apos; is never reassigned. Use &apos;const&apos; instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-const)&lt;/span&gt;\">foo</mark> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <mark class=\"eslint-error\" data-tip=\"&apos;bar&apos; is never reassigned. Use &apos;const&apos; instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-const)&lt;/span&gt;\">bar</mark><span class=\"token punctuation\">,</span> <mark class=\"eslint-error\" data-tip=\"&apos;baz&apos; is never reassigned. Use &apos;const&apos; instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-const)&lt;/span&gt;\">baz</mark> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"&apos;i&apos; is never reassigned. Use &apos;const&apos; instead.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-const)&lt;/span&gt;\">i</mark> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bar<span class=\"token punctuation\">,</span> baz <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"prefer-destructuring":{"name":"prefer-destructuring","value":["warn",{"object":true,"array":true}],"description":"必须使用解构赋值","category":"","badExample":"<span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Use array destructuring.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-destructuring)&lt;/span&gt;\">foo <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Use object destructuring.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-destructuring)&lt;/span&gt;\">bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>bar</mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>"},"prefer-rest-params":{"name":"prefer-rest-params","value":"warn","description":"必须使用 ...args 而不是 arguments","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><mark class=\"eslint-error\" data-tip=\"Use the rest parameters instead of &apos;arguments&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-rest-params)&lt;/span&gt;\">arguments</mark><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"prefer-spread":{"name":"prefer-spread","value":"warn","description":"必须使用 ... 而不是 apply，比如 foo(...args)","category":"","badExample":"<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Use the spread operator instead of &apos;.apply()&apos;.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-spread)&lt;/span&gt;\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"prefer-template":{"name":"prefer-template","value":"error","description":"必须使用模版字符串而不是字符串连接","category":"","badExample":"<mark class=\"eslint-error\" data-tip=\"Unexpected string concatenation.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(prefer-template)&lt;/span&gt;\"><span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> name</mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token template-string\"><span class=\"token string\">`Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>"},"quote-props":{"name":"quote-props","value":["error","as-needed",{"keywords":false}],"description":"要求对象字面量属性名称用引号括起来","category":"","badExample":"<span class=\"token keyword\">const</span> bad <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <mark class=\"eslint-error\" data-tip=\"Unnecessarily quoted property &apos;foo&apos; found.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(quote-props)&lt;/span&gt;\"><span class=\"token string\">'foo'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></mark><span class=\"token punctuation\">,</span>\n  <mark class=\"eslint-error\" data-tip=\"Unnecessarily quoted property &apos;bar&apos; found.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(quote-props)&lt;/span&gt;\"><span class=\"token string\">'bar'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></mark><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'data-blah'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> good <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'data-blah'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"quotes":{"name":"quotes","value":["warn","single",{"allowTemplateLiterals":false}],"description":"使用单引号 '' 定义字符串","category":"","badExample":"","goodExample":""},"radix":{"name":"radix","value":"warn","description":"parseInt 必须传入第二个参数","category":"","badExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Missing radix parameter.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(radix)&lt;/span&gt;\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'071'</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 57</span>","goodExample":"<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'071'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 71</span>"},"semi":{"name":"semi","value":["error","always"],"description":"要加分号","category":"","badExample":"<span class=\"token keyword\">const</span> jedis <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'luke'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'leia'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  jedis<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><mark class=\"eslint-error\" data-tip=\"Missing semicolon.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(semi)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Missing semicolon.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(semi)&lt;/span&gt;\"></mark><mark class=\"eslint-error\" data-tip=\"Missing semicolon.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(semi)&lt;/span&gt;\"></mark>","goodExample":"<span class=\"token keyword\">const</span> jedis <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'luke'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'leia'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  jedis<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"},"space-before-blocks":{"name":"space-before-blocks","value":"error","description":"强制在块之前使用一致的空格","category":"","badExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><mark class=\"eslint-error\" data-tip=\"Missing space before opening brace.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-before-blocks)&lt;/span&gt;\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">g</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><mark class=\"eslint-error\" data-tip=\"Missing space before opening brace.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-before-blocks)&lt;/span&gt;\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"space-before-function-paren":{"name":"space-before-function-paren","value":["error",{"anonymous":"always","named":"never","asyncArrow":"always"}],"description":"强制在 function 的左括号之前使用一致的空格","category":"","badExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">h</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Missing space before function parentheses.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-before-function-paren)&lt;/span&gt;\">(</mark></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"},"space-in-parens":{"name":"space-in-parens","value":["error","never"],"description":"强制在圆括号内使用一致的空格","category":"","badExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><mark class=\"eslint-error\" data-tip=\"There should be no space after this paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-in-parens)&lt;/span&gt;\"> </mark><span class=\"token parameter\">foo</span><mark class=\"eslint-error\" data-tip=\"There should be no space before this paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-in-parens)&lt;/span&gt;\"> </mark><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><mark class=\"eslint-error\" data-tip=\"There should be no space after this paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-in-parens)&lt;/span&gt;\"> </mark>foo<mark class=\"eslint-error\" data-tip=\"There should be no space before this paren.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-in-parens)&lt;/span&gt;\"> </mark><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>","goodExample":"<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"},"space-infix-ops":{"name":"space-infix-ops","value":"error","description":"要求操作符周围有空格","category":"","badExample":"<span class=\"token keyword\">const</span> x<span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Operator &apos;=&apos; must be spaced.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-infix-ops)&lt;/span&gt;\">=</mark></span>y<span class=\"token operator\"><mark class=\"eslint-error\" data-tip=\"Operator &apos;+&apos; must be spaced.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(space-infix-ops)&lt;/span&gt;\">+</mark></span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>","goodExample":"<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>"},"spaced-comment":{"name":"spaced-comment","value":["error","always"],"description":"注释的斜线或 * 后必须有空格","category":"","badExample":"<span class=\"token comment\"><mark class=\"eslint-error\" data-tip=\"Expected space or tab after &apos;//&apos; in comment.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(spaced-comment)&lt;/span&gt;\">//foo</mark></span>\n<span class=\"token comment\"><mark class=\"eslint-error\" data-tip=\"Expected space or tab after &apos;/*&apos; in comment.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(spaced-comment)&lt;/span&gt;\">/*bar */</mark></span>\n<span class=\"token comment\"><mark class=\"eslint-error\" data-tip=\"Expected space or tab after &apos;/**&apos; in comment.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(spaced-comment)&lt;/span&gt;\">/**baz */</mark></span>","goodExample":"<span class=\"token comment\">// foo</span>\n<span class=\"token comment\">/* bar */</span>\n<span class=\"token comment\">/** baz */</span>"},"template-curly-spacing":{"name":"template-curly-spacing","value":["error","never"],"description":"要求或禁止模板字符串中的嵌入表达式周围空格的使用","category":"","badExample":"","goodExample":""},"wrap-iife":{"name":"wrap-iife","value":["error","outside"],"description":"要求立即执行的函数使用括号括起来","category":"","badExample":"","goodExample":""}}